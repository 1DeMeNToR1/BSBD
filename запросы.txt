1) Поиск автомобиля по винкоду
CREATE OR REPLACE FUNCTION Найти_Автомобиль_По_Винкоду(vin_код VARCHAR)
RETURNS TABLE (
    Год VARCHAR(4),
    Номер_СТС VARCHAR(10),
    VIN_Номер VARCHAR(18),
    Название_Марки VARCHAR(50),
    Название_Модели VARCHAR(50),
    Имя_Владельца VARCHAR(50),
    Фамилия_Владельца VARCHAR(50),
    Отчество_Владельца VARCHAR(50)
)
AS $$
BEGIN
    RETURN QUERY
    SELECT
        Автомобили.Год,
        Автомобили.Номер_СТС,
        Автомобили.VIN_Номер,
        Марка.Название AS Название_Марки,
        Модель.Название AS Название_Модели,
        Владелец_Авто.Имя,
        Владелец_Авто.Фамилия,
        Владелец_Авто.Отчество
    FROM
        Автомобили
    JOIN Модель ON Автомобили.ID_Модели = Модель.ID_Модели
    JOIN Марка ON Модель.ID_Марки = Марка.ID_Марки
    JOIN Владелец_Авто ON Автомобили.ID_Владельца = Владелец_Авто.ID_Владельца
    WHERE
        Автомобили.VIN_Номер = vin_код;
END;
$$ LANGUAGE plpgsql;
------------------------------------------------------------
SELECT * FROM Найти_Автомобиль_По_Винкоду('VIN123ABC');
------------------------------------------------------------
3) Вывести список автомобилей, которые в данный момент находятся в сервисе
CREATE OR REPLACE FUNCTION Список_Запчастей_По_Модели(
    автомобиль_модель VARCHAR(50)
) RETURNS TABLE (
    ID_Запчасти INTEGER,
    Наименование VARCHAR(100),
    Артикул VARCHAR(20),
    Описание TEXT,
    Стоимость DECIMAL(10, 2)
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        p.ID_Запчасти,
        p.Наименование,
        p.Артикул,
        p.Описание,
        p.Стоимость
    FROM
        Запчасти p
    JOIN
        Проданные_Запчасти_В_Заказе spz ON p.ID_Запчасти = spz.ID_Запчасти
    JOIN
        Заказы o ON spz.ID_Заказа = o.ID_Заказа
    JOIN
        Автомобили a ON o.ID_Автомобиля = a.ID_Автомобиля
    JOIN
        Модель m ON a.ID_Модели = m.ID_Модели
    WHERE
        m.Название = автомобиль_модель;
END;
$$ LANGUAGE plpgsql;
------------------------------------------------------------
SELECT Список_Запчастей_По_Модели('Camry');
------------------------------------------------------------

4) Получить количество услуг каждого типа
CREATE OR REPLACE FUNCTION Количество_Услуг_По_Типу()
RETURNS TABLE (
    Вид_Услуги VARCHAR(50),
    Количество BIGINT
) AS
$$
BEGIN
    RETURN QUERY
    SELECT
        us.Вид_Услуги,
        COUNT(*) AS Количество
    FROM
        Услуги_В_Заказе u
    JOIN
        Заказы o ON u.ID_Заказ = o.ID_Заказа
    JOIN
        Услуги us ON u.ID_Услуги = us.ID_Услуги
    GROUP BY
        us.Вид_Услуги;
END;
$$
LANGUAGE plpgsql;
------------------------------------------------------------
SELECT Количество_Услуг_По_Типу();
------------------------------------------------------------
5) Получить суммарную стоимость запчастей в заказах за последний месяц
CREATE OR REPLACE FUNCTION Суммарная_Стоимость_Запчастей_ЗаПоследнийМесяц()
RETURNS TABLE (
    Суммарная_Стоимость DECIMAL(10, 2)
) AS
$$
BEGIN
    RETURN QUERY
    SELECT
        COALESCE(SUM(z.Стоимость * pz.Количество), 0.00) AS Суммарная_Стоимость
    FROM
        Проданные_Запчасти_В_Заказе pz
    JOIN
        Запчасти z ON pz.ID_Запчасти = z.ID_Запчасти
    JOIN
        Заказы o ON pz.ID_Заказа = o.ID_Заказа
    WHERE
        o.Дата_Заказа >= (CURRENT_DATE - INTERVAL '1 month')
        AND o.Дата_Заказа <= CURRENT_DATE;
END;
$$
LANGUAGE plpgsql;
------------------------------------------------------------
SELECT * FROM Суммарная_Стоимость_Запчастей_ЗаПоследнийМесяц();
------------------------------------------------------------
6) Выгрузить договор по заказу 
CREATE OR REPLACE FUNCTION Выгрузить_заказ(
    Заказ_ID INTEGER
) RETURNS TABLE (
    ID_Заказа INTEGER,
    Дата_Заказа DATE,
    Статус_Заказа VARCHAR(50),
    Имя_Владельца VARCHAR(50),
    Фамилия_Владельца VARCHAR(50),
    Марка_Авто VARCHAR(50),
    Модель_Авто VARCHAR(50),
    Проданная_Запчасть_Наименование VARCHAR(100),
    Количество_Запчастей INTEGER,
    Сумма_Платежа DECIMAL(10, 2),
    Дата_Платежа DATE
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        Заказы.ID_Заказа,
        Заказы.Дата_Заказа,
        Заказы.Статус_Заказа,
        Владелец_Авто.Имя,
        Владелец_Авто.Фамилия,
        Марка_Модель.Марка,
        Марка_Модель.Модель,
        Проданные_Запчасти_В_Заказе.Проданная_Запчасть_Наименование,
        Проданные_Запчасти_В_Заказе.Количество,
        Платежи.Сумма_Платежа,
        Платежи.Дата_Платежа
    FROM
        Заказы
        JOIN Автомобили ON Заказы.ID_Автомобиля = Автомобили.ID_Автомобиля
        JOIN Владелец_Авто ON Автомобили.ID_Владельца = Владелец_Авто.ID_Владельца
        LEFT JOIN (
            SELECT
                Проданные_Запчасти_В_Заказе.ID_Заказа,
                Запчасти.Наименование AS Проданная_Запчасть_Наименование,
                Проданные_Запчасти_В_Заказе.Количество
            FROM Проданные_Запчасти_В_Заказе
            LEFT JOIN Запчасти ON Проданные_Запчасти_В_Заказе.ID_Запчасти = Запчасти.ID_Запчасти
        ) AS Проданные_Запчасти_В_Заказе ON Заказы.ID_Заказа = Проданные_Запчасти_В_Заказе.ID_Заказа
        LEFT JOIN (
            SELECT
                Платежи.ID_Заказа,
                SUM(Платежи.Сумма_платежа) AS Сумма_Платежа,
                MAX(Платежи.Дата_платежа) AS Дата_Платежа
            FROM Платежи
            GROUP BY Платежи.ID_Заказа
        ) AS Платежи ON Заказы.ID_Заказа = Платежи.ID_Заказа
        LEFT JOIN (
            SELECT
                Модель.ID_Модели,
                Марка.Название AS Марка,
                Модель.Название AS Модель
            FROM Модель
            JOIN Марка ON Модель.ID_Марки = Марка.ID_Марки
        ) AS Марка_Модель ON Автомобили.ID_Модели = Марка_Модель.ID_Модели
    WHERE
        Заказы.ID_Заказа = Заказ_ID;
END;
$$ LANGUAGE plpgsql;
------------------------------------------------------------
SELECT Выгрузить_заказ('4')
------------------------------------------------------------
7)выдать данные о заданном авто и состоянии выполненных работ
CREATE OR REPLACE FUNCTION Информация_О_Авто_И_Работах(
    Авто_ID INTEGER
) RETURNS TABLE (
    Модель VARCHAR(50),
    Год VARCHAR(4),
    Номер_СТС VARCHAR(10),
    VIN_Номер VARCHAR(18),
    Имя_Владельца VARCHAR(50),
    Фамилия_Владельца VARCHAR(50),
    Дата_Заказа DATE,
    Статус_Заказа VARCHAR(50),
    Описание_Проблемы TEXT,
    Вид_Услуги VARCHAR(100),
    Описание_Услуги TEXT,
    Стоимость_Услуги DECIMAL(10, 2)
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        CAST(Автомобили.ID_Модели AS VARCHAR(50)),
        Автомобили.Год,
        Автомобили.Номер_СТС,
        Автомобили.VIN_Номер,
        Владелец_Авто.Имя AS Имя,
        Владелец_Авто.Фамилия AS Фамилия,
        Заказы.Дата_Заказа,
        Заказы.Статус_Заказа,
        Заказы.Описание_Проблемы,
        Услуги.Вид_Услуги,
        Услуги.Описание_Услуги,
        Услуги.Стоимость_Услуги
    FROM
        Автомобили
        JOIN Владелец_Авто ON Автомобили.ID_Владельца = Владелец_Авто.ID_Владельца
        LEFT JOIN Заказы ON Автомобили.ID_Автомобиля = Заказы.ID_Автомобиля
        LEFT JOIN Услуги_В_Заказе ON Заказы.ID_Заказа = Услуги_В_Заказе.ID_Заказ
        LEFT JOIN Услуги ON Услуги_В_Заказе.ID_Услуги = Услуги.ID_Услуги
    WHERE
        Автомобили.ID_Автомобиля = Авто_ID;
END;
$$ LANGUAGE plpgsql;
------------------------------------------------------------
SELECT Информация_О_Авто_И_Работах('1');
------------------------------------------------------------
8)Выдать историю обслуживаний автомобиля по заданному клиенту
CREATE OR REPLACE FUNCTION История_Обслуживания_Клиента(
    Клиент_ID INTEGER
) RETURNS TABLE (
    Марка VARCHAR(50),
    Модель VARCHAR(50),
    Год VARCHAR(4),
    Номер_СТС VARCHAR(10),
    VIN_Номер VARCHAR(18),
    Дата_Заказа DATE,
    Описание_Проблемы TEXT,
    Вид_Услуги VARCHAR(100),
    Описание_Услуги TEXT
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        Марка.Название AS Марка,
        Модель.Название AS Модель,
        Автомобили.Год,
        Автомобили.Номер_СТС,
        Автомобили.VIN_Номер,
        Заказы.Дата_Заказа,
        Заказы.Описание_Проблемы,
        Услуги.Вид_Услуги,
        Услуги.Описание_Услуги
    FROM
        Владелец_Авто
        JOIN Автомобили ON Владелец_Авто.ID_Владельца = Автомобили.ID_Владельца
        LEFT JOIN Заказы ON Автомобили.ID_Автомобиля = Заказы.ID_Автомобиля
        LEFT JOIN Услуги_В_Заказе ON Заказы.ID_Заказа = Услуги_В_Заказе.ID_Заказ
        LEFT JOIN Услуги ON Услуги_В_Заказе.ID_Услуги = Услуги.ID_Услуги
        LEFT JOIN Модель ON Автомобили.ID_Модели = Модель.ID_Модели
        LEFT JOIN Марка ON Модель.ID_Марки = Марка.ID_Марки
    WHERE
        Владелец_Авто.ID_Владельца = Клиент_ID;
END;
$$ LANGUAGE plpgsql;
------------------------------------------------------------
SELECT История_Обслуживания_Клиента('1');
------------------------------------------------------------
9)Выдать сотрудников, которые выолняли виды работ для заданного авто
CREATE OR REPLACE FUNCTION Сотрудники_По_Автомобилю(
    Автомобиль_ID INTEGER
) RETURNS TABLE (
    Имя_Сотрудника VARCHAR(50),
    Фамилия_Сотрудника VARCHAR(50),
    Должность_Сотрудника VARCHAR(50),
    Вид_Услуги VARCHAR(100),
    Описание_Услуги TEXT
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        Сотрудники.Имя,
        Сотрудники.Фамилия,
        Сотрудники.Должность,
        Услуги.Вид_Услуги,
        Услуги.Описание_Услуги
    FROM
        Сотрудники
        JOIN Услуги_В_Заказе ON Сотрудники.ID_Сотрудника = Услуги_В_Заказе.ID_Сотрудника
        JOIN Услуги ON Услуги_В_Заказе.ID_Услуги = Услуги.ID_Услуги
        JOIN Заказы ON Услуги_В_Заказе.ID_Заказ = Заказы.ID_Заказа
    WHERE
        Заказы.ID_Автомобиля = Автомобиль_ID;
END;
$$ LANGUAGE plpgsql;
------------------------------------------------------------
SELECT Сотрудники_По_Автомобилю('1');
------------------------------------------------------------
10)Получить суммарную выручку за период
CREATE OR REPLACE FUNCTION Суммарная_Выручка_За_Период(
    Период_Начало DATE,
    Период_Конец DATEы
) RETURNS DECIMAL(10, 2) AS $$
DECLARE
    Общая_Сумма DECIMAL(10, 2);
BEGIN
    SELECT COALESCE(SUM(Платежи.Сумма_Платежа + Запчасти.Стоимость), 0)
    INTO Общая_Сумма
    FROM Платежи
    LEFT JOIN Заказы ON Платежи.ID_Заказа = Заказы.ID_Заказа
    LEFT JOIN Проданные_Запчасти_В_Заказе ON Заказы.ID_Заказа = Проданные_Запчасти_В_Заказе.ID_Заказа
    LEFT JOIN Запчасти ON Проданные_Запчасти_В_Заказе.ID_Запчасти = Запчасти.ID_Запчасти
    WHERE
        Платежи.Дата_платежа >= Период_Начало
        AND Платежи.Дата_платежа <= Период_Конец;

    RETURN Общая_Сумма;
END;
$$ LANGUAGE plpgsql;

SELECT Выручка_За_Период('2024-01-1', '2024-02-29');
11)Получить самую частую по посещению сервиса машину
CREATE OR REPLACE FUNCTION Самая_Частая_Машина() RETURNS TABLE (
    Марка VARCHAR(50),
    Модель VARCHAR(50),
    Год VARCHAR(4),
    Количество_Посещений BIGINT
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        Марка.Название AS Марка,
        Модель.Название AS Модель,
        Автомобили.Год,
        COUNT(Заказы.ID_Заказа) AS Количество_Посещений
    FROM
        Автомобили
    LEFT JOIN
        Заказы ON Автомобили.ID_Автомобиля = Заказы.ID_Автомобиля
    LEFT JOIN
        Модель ON Автомобили.ID_Модели = Модель.ID_Модели
    LEFT JOIN
        Марка ON Модель.ID_Марки = Марка.ID_Марки
    GROUP BY
        Марка.Название, Модель.Название, Автомобили.Год
    ORDER BY
        Количество_Посещений DESC
    LIMIT 1;
END;
$$ LANGUAGE plpgsql;
------------------------------------------------------------
SELECT Самая_Частая_Машина();
------------------------------------------------------------
12)Получить топ-3 самых популярных услуг
CREATE OR REPLACE FUNCTION Топ_Популярных_Услуг() RETURNS TABLE (
    Вид_Услуги VARCHAR(50),
    Описание_Услуги TEXT,
    Стоимость_Услуги NUMERIC(10, 2),
    Количество_Заказов BIGINT
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        Услуги.Вид_Услуги,
        Услуги.Описание_Услуги,
        Услуги.Стоимость_Услуги,
        COUNT(Услуги_В_Заказе.ID_Услуги) AS Количество_Заказов
    FROM
        Услуги
    LEFT JOIN
        Услуги_В_Заказе ON Услуги.ID_Услуги = Услуги_В_Заказе.ID_Услуги
    GROUP BY
        Услуги.ID_Услуги
    ORDER BY
        Количество_Заказов DESC
    LIMIT 3;
END;
$$ LANGUAGE plpgsql;
------------------------------------------------------------
SELECT Топ_Популярных_Услуг();
------------------------------------------------------------
13)Получить самого частого клиента
CREATE OR REPLACE FUNCTION Самый_Частый_Клиент() RETURNS TABLE (
    Имя VARCHAR(50),
    Фамилия VARCHAR(50),
    Отчество VARCHAR(50),
    Телефон VARCHAR(20),
    Количество_Посещений INTEGER
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        Владелец_Авто.Имя,
        Владелец_Авто.Фамилия,
        Владелец_Авто.Отчество,
        Владелец_Авто.Телефон,
        COUNT(DISTINCT Заказы.ID_Заказа)::INTEGER AS Количество_Посещений
    FROM
        Владелец_Авто
    LEFT JOIN
        Автомобили ON Владелец_Авто.ID_Владельца = Автомобили.ID_Владельца
    LEFT JOIN
        Заказы ON Автомобили.ID_Автомобиля = Заказы.ID_Автомобиля
    GROUP BY
        Владелец_Авто.ID_Владельца
    ORDER BY
        Количество_Посещений DESC
    LIMIT 1;
END;
$$ LANGUAGE plpgsql;
------------------------------------------------------------
SELECT Самый_Частый_Клиент();
------------------------------------------------------------
14)
CREATE OR REPLACE FUNCTION Остаток_По_Платежам(ID_Владельца_Параметр INT)
RETURNS DECIMAL(10, 2)
AS $$
DECLARE
    Остаток DECIMAL(10, 2) := 0;
BEGIN
    SELECT COALESCE(SUM(CASE WHEN Платежи.Статус_платежа = 'Выполнен' THEN NULL ELSE Платежи.Сумма_платежа END), 0)
    INTO Остаток
    FROM Владелец_Авто
    LEFT JOIN Автомобили ON Владелец_Авто.ID_Владельца = Автомобили.ID_Владельца
    LEFT JOIN Заказы ON Автомобили.ID_Автомобиля = Заказы.ID_Автомобиля
    LEFT JOIN Платежи ON Заказы.ID_Заказа = Платежи.ID_Заказа
    WHERE Владелец_Авто.ID_Владельца = ID_Владельца_Параметр;

    RETURN Остаток;
END;
$$ LANGUAGE plpgsql;
------------------------------------------------------------
SELECT Рассчитать_Остаток_По_Платежам(1);
------------------------------------------------------------
15) Получить суммарную выручку от услуг 
CREATE OR REPLACE FUNCTION Суммарная_Выручка_От_Услуг_За_Последний_Месяц()
RETURNS TABLE (
    ID_Сотрудника INTEGER,
    Имя VARCHAR(50),
    Фамилия VARCHAR(50),
    Отчество VARCHAR(50),
    Должность VARCHAR(50),
    Выручка DECIMAL(10, 2)
) AS
$$
BEGIN
    RETURN QUERY
    SELECT
        s.ID_Сотрудника,
        s.Имя,
        s.Фамилия,
        s.Отчество,
        s.Должность,
        COALESCE(SUM(p.Сумма_платежа), 0.00) AS Выручка
    FROM
        Сотрудники s
    LEFT JOIN
        График_Работы g ON s.ID_Сотрудника = g.ID_Сотрудника
    LEFT JOIN
        Платежи p ON g.Дата >= (CURRENT_DATE - INTERVAL '1 month')
                AND g.Дата <= CURRENT_DATE
    GROUP BY
        s.ID_Сотрудника,
        s.Имя,
        s.Фамилия,
        s.Отчество,
        s.Должность;
END;
$$
LANGUAGE plpgsql;
------------------------------------------------------------
SELECT * FROM Суммарная_Выручка_От_Услуг_За_Последний_Месяц();
------------------------------------------------------------
16)
CREATE OR REPLACE FUNCTION Количество_Моделей_По_Маркам()
RETURNS TABLE (
    Название_Марки VARCHAR(50),
    Количество_Моделей BIGINT
) AS
$$
BEGIN
    RETURN QUERY
    SELECT
        Марка.Название,
        COUNT(Модель.ID_Модели) AS Количество_Моделей
    FROM
        Марка
    LEFT JOIN
        Модель ON Марка.ID_Марки = Модель.ID_Марки
    GROUP BY
        Марка.ID_Марки, Марка.Название;
END;
$$
LANGUAGE plpgsql;
------------------------------------------------------------
SELECT Количество_Моделей_По_Маркам();
------------------------------------------------------------


ДОБАВЛЕНИЕ №№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№
1)
CREATE OR REPLACE FUNCTION Добавить_Запчасть_В_Заказ(
    Заказ_ID INTEGER,
    Запчасть_ID INTEGER,
    Количество INTEGER
) RETURNS VOID AS $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM Заказы WHERE ID_Заказа = Заказ_ID) THEN
        RAISE EXCEPTION 'Заказ с ID % не существует.', Заказ_ID;
    END IF;

    IF NOT EXISTS (SELECT 1 FROM Запчасти WHERE ID_Запчасти = Запчасть_ID) THEN
        RAISE EXCEPTION 'Запчасть с ID % не существует.', Запчасть_ID;
    END IF;

    INSERT INTO Проданные_Запчасти_В_Заказе (ID_Заказа, ID_Запчасти, Количество)
    VALUES (Заказ_ID, Запчасть_ID, Количество);

    UPDATE Заказы SET Статус_Заказа = 'В обработке' WHERE ID_Заказа = Заказ_ID;

END;
$$ LANGUAGE plpgsql;
------------------------------------------------------------
SELECT Добавить_Запчасть_В_Заказ('6', '2', '1')
------------------------------------------------------------
2)
CREATE OR REPLACE PROCEDURE Добавить_Модель(
    входная_марка VARCHAR(50),
    входная_модель VARCHAR(50)
)
AS $$
DECLARE
    марка_id INTEGER;
BEGIN
    SELECT ID_Марки INTO марка_id FROM Марка WHERE Название = входная_марка;

    IF марка_id IS NULL THEN
        RAISE EXCEPTION 'Марка % не существует.', входная_марка;
    ELSE
        INSERT INTO Модель (ID_Марки, Название) VALUES (марка_id, входная_модель);
    END IF;
END;
$$ LANGUAGE plpgsql;
------------------------------------------------------------
SELECT Добавить_Марку_И_Модель('1', 'Camry');
------------------------------------------------------------
2.5)
CREATE OR REPLACE PROCEDURE Добавить_Марку(
    входная_марка VARCHAR(50)
)
AS $$
DECLARE
    марка_id INTEGER;
BEGIN
    SELECT ID_Марки INTO марка_id FROM Марка WHERE Название = входная_марка;

    IF марка_id IS NULL THEN
        INSERT INTO Марка (Название) VALUES (входная_марка);
    END IF;
END;
$$ LANGUAGE plpgsql;
------------------------------------------------------------
SELECT Добавить_Марку_И_Модель('Toyota');
------------------------------------------------------------
3)
CREATE OR REPLACE PROCEDURE Добавить_Заказ(
    входной_статус VARCHAR(50),
    входное_описание TEXT,
    входной_id_Автомобиля INTEGER
)
AS
$$
BEGIN
    INSERT INTO Заказы (Статус_Заказа, Описание_Проблемы, ID_Автомобиля)
    VALUES (входной_статус, входное_описание, входной_id_Автомобиля);
END;
$$
LANGUAGE plpgsql;
------------------------------------------------------------
CALL Добавить_Заказ('Новый', 'Неисправность двигателя', 1);
------------------------------------------------------------
4)
CREATE OR REPLACE PROCEDURE Добавить_Владельца_Авто(
    Владелец_Имя VARCHAR(50),
    Владелец_Фамилия VARCHAR(50),
    Владелец_Отчество VARCHAR(50),
    Владелец_Телефон VARCHAR(11),
    Владелец_Адрес VARCHAR(155),
    Владелец_Номер_ВУ VARCHAR(10)
)
AS $$
BEGIN
    INSERT INTO "Владелец_Авто" ("Имя", "Фамилия", "Отчество", "Телефон", "Адрес", "Номер_ВУ")
    VALUES (Владелец_Имя, Владелец_Фамилия, Владелец_Отчество, Владелец_Телефон, Владелец_Адрес, Владелец_Номер_ВУ);
END;
$$ LANGUAGE plpgsql;
------------------------------------------------------------
CALL Добавить_Владельца_Авто('Иван','Иванов','Иванович','82345678901','Улица Пушкина, дом Колотушкина','ABC123456');
------------------------------------------------------------
5)
CREATE OR REPLACE PROCEDURE Добавить_платеж(
    Платеж_Сумма DECIMAL(10, 2),
    Платеж_Статус TEXT,
    Платеж_ID_Заказа INTEGER
)
AS $$
BEGIN
    INSERT INTO Платежи ("Сумма_платежа", "Статус_платежа", "id_Заказа")
    VALUES (Платеж_Сумма, Платеж_Статус, Платеж_ID_Заказа);
END;
$$ LANGUAGE plpgsql;
